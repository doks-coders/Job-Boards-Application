@page "/upsert-job"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
	<DataAnnotationsValidator />
	<MudGrid Class="d-flex justify-center">
		<MudItem xs="12" sm="7">
			<MudCard>

				<MudCardContent>
					<MudTextField Label="JobTitle" Class="mt-3"
								  @bind-Value="model.JobTitle" For="@(() => model.JobTitle)" />

					<MudTextField Label="About" Class="mt-3"
								  @bind-Value="model.About" For="@(() => model.About)" />

					<MudTextField Label="Salary" Class="mt-3"
								  @bind-Value="model.Salary" For="@(() => model.Salary)" />


					@foreach (var val in GetSelectedSkills())
					{
						<MudChip Variant="Variant.Outlined" OnClose="()=>RemoveCheckSkill(val.Name)" Color="Color.Primary">@val.Name</MudChip>
					}



					<MudAutocomplete T="Skill" Label="Select Skill" @bind-Value="value1"
									 SearchFunc="@SearchSkill" ToStringFunc="@(e=> e==null?null : $"{e.Name}")">
						<ItemTemplate Context="e">
							<MudCheckBox @onkeypress="()=>OnCheckSkill(e.Name)" @bind-Value="e.Selected" Label="@e.Name"></MudCheckBox>

						</ItemTemplate>
					</MudAutocomplete>


				
					<MudTextField Label="Contact Email" Class="mt-3"
								  @bind-Value="model.ContactEmail" For="@(() => model.ContactEmail)" />

				</MudCardContent>

				<div Class="pa-3">
					<MudText Style="text-align:center;font-weight:bold">Responsibilites</MudText>
					@foreach (var responsibility in Responsibilites)
					{
						<div Class="pa-3 mt-3">
							<MudTextField Label="Responsibility" Class="mt-3"
										  @bind-Value="responsibility._value" For="@(() => responsibility._value)" />

						</div>
					}
					<div class="d-flex justify-center">
						<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="()=>AddResponsibility()">Add Responsibility</MudButton>
					</div>

					<MudText Style="text-align:center;font-weight:bold">Qualifications</MudText>
					@foreach (var qualification in Qualifications)
					{
						<div Class="pa-3 mt-3">
							<MudTextField Label="Qualifications" Class="mt-3"
										  @bind-Value="qualification._value" For="@(() => qualification._value)" />

						</div>
					}
					<div class="d-flex justify-center">
						<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="()=>AddQualifications()">Add Work Experience</MudButton>
					</div>

				</div>
				<MudCardActions>
					<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
				</MudCardActions>
			</MudCard>
		</MudItem>

	</MudGrid>
</EditForm>

@code {
	JobItem model = new JobItem();
	private Skill value1 = new() { Name = "" };

	bool success;

	public List<Value> Responsibilites = new() { new() };
	public List<Value> Qualifications = new() { new() };
	public class JobItem
	{
		[Required]
		public string JobTitle { get; set; }

		[Required]
		public string About { get; set; }

		[Required]
		public string Salary { get; set; }

		[Required]
		public string JobFunction { get; set; }

		[Required]
		public string ContactEmail { get; set; }


	}

	public class Skill
	{
		public string Name { get; set; }
		public bool Selected { get; set; } = false;
	}

	public class Value
	{
		public string _value { get; set; } = "";
	}
	public List<Skill> skillList { get; set; } = new List<Skill>()
	{
		new (){Name="BootStrap"},new (){Name="Python"},new (){Name="Javascript"}
	};

	

	/*This section is for skill search*/
	private async Task<IEnumerable<Skill>> SearchSkill(string value)
	=> skillList.Where(u => u.Name.ToLower().Contains(value.ToLower())).ToList();


	private List<Skill> GetSelectedSkills()
	{
		return skillList.Where(u => u.Selected == true).ToList();
	}
	private void OnCheckSkill(string value)
	{
		var skill = skillList.Where(u => u.Name == value).FirstOrDefault();
		skill.Selected = !skill.Selected;
	}
	private void RemoveCheckSkill(string value)
	{
		var skill = skillList.Where(u => u.Name == value).FirstOrDefault();
		skill.Selected = false;
	}



	


	private void AddResponsibility()
	{
		Responsibilites.Add(new());
	}
	private void AddQualifications()
	{
		Qualifications.Add(new());
	}
	

	private void RemoveResponsiblity(int id)
	{
		Responsibilites.RemoveAt(id);
	}

	private void OnValidSubmit(EditContext context)
	{
		success = true;
		StateHasChanged();

	}

}
