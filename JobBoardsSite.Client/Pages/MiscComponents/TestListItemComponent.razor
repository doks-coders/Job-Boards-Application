@using System.ComponentModel.DataAnnotations

<MudText Class="mt-3" Style="text-align:center;font-weight:bold">@Label</MudText>
	@foreach (var (item, index) in Items.Select((item, index) => (item, index)))
{


	<MudTextField Label="@Label" Class="mt-3"
				  @bind-Value="item._value"
				  @bind-Value:after="OnValueChanged" />
}

<div class="d-flex justify-center">
	<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="()=>AddItems()">Add Item</MudButton>
</div>

@code {

	[Parameter]
	public string InputValue { get; set; }

	[Parameter]
	public string Label { get; set; }

	[Parameter]
	public EventCallback<string> ValueChanged { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (!string.IsNullOrEmpty(InputValue))
		{
			var values = InputValue.Split("||", StringSplitOptions.RemoveEmptyEntries);
			Items = values.Select(val => new Value() { _value = val }).ToList();
		}
	}

	public class Value
	{
		[Required]
		public string _value { get; set; } = "";
	}

	public List<Value> Items = new() { new() };

	private async Task AddItems()
	{
		Items.Add(new());
		await ValueChanged.InvokeAsync(GetStringOfSelectedItems());
	}
	private async Task RemoveItem(int id)
	{
		Items.RemoveAt(id);
		await ValueChanged.InvokeAsync(GetStringOfSelectedItems());
	}

	private string GetStringOfSelectedItems()
	{
		var value = Items.Where(u => !string.IsNullOrEmpty(u._value)).Select(u => u._value).ToList();

		return string.Join("||", value.ToArray());

	}
	private async Task OnValueChanged()
	{
		var value = GetStringOfSelectedItems();
		await ValueChanged.InvokeAsync(value);

	}
}
