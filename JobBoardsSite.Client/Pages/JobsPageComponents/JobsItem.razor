@using JobBoardsSite.Shared.Responses

<MudCard Outlined="true" Class="d-flex">
	<MudCardContent Style="width:100%;" Class="d-flex justify-space-between ">
		<div Class="d-flex align-center">
			<MudImage Src="images/image.jpeg" Alt="Mony the dog" Height="50" Width="50" Elevation="25" Class="rounded-lg" />
			<MudContainer>
				<div Class="d-flex align-center">
					<div Class="d-flex  flex-column">
						<MudText Style="font-size:small" Class="mr-10">@Job.CompanyName</MudText>
							<MudText Style="font-size:x-small">@Job.JobTitle</MudText>
					</div>

					

						<div Class="d-flex  flex-column">

							<div class="d-flex">
								@foreach (var item in SelectedSkills)
							{
								<MudChip Style="font-size:10px" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary">@item</MudChip>

							}
							</div>

						<div class="d-flex">
							@foreach (var item in WorkLocationType)
							{
								<MudChip Style="font-size:10px" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary">@item</MudChip>

							}
						</div>
						</div>
					

					
				</div>
			
			</MudContainer>
		</div>
		<div>
			<MudText Style="font-size:small">N @Job.Salary</MudText>
			<MudText Style="font-size:x-small" Typo="Typo.caption">2 days ago</MudText>
		</div>
	</MudCardContent>

</MudCard>


@code {
	[Parameter]
	public JobListItemResponse Job { get; set; }
	List<string> SelectedSkills = new();
	List<string> WorkLocationType = new();

	protected override async Task OnInitializedAsync()
	{
		SelectedSkills = ConvertStringToList(Job.SelectedSkills);
		WorkLocationType = ConvertStringToList(Job.WorkLocationType);
	}

	private List<string> ConvertStringToList(string item)
	{
		string[] values = item.Split("||", StringSplitOptions.RemoveEmptyEntries);
		return values.ToList();
	}


}